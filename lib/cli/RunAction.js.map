{"version":3,"file":"RunAction.js","sourceRoot":"","sources":["../../src/cli/RunAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as colors from 'colors';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { PackageJsonLookup, FileSystem, IPackageJson } from '@rushstack/node-core-library';\n\nimport {\n  CommandLineAction,\n  CommandLineStringParameter,\n  CommandLineFlagParameter\n} from '@rushstack/ts-command-line';\n\nimport { Extractor, ExtractorResult } from '../api/Extractor';\nimport { IConfigFile } from '../api/IConfigFile';\n\nimport { ApiExtractorCommandLine } from './ApiExtractorCommandLine';\nimport { ExtractorConfig } from '../api/ExtractorConfig';\n\nexport class RunAction extends CommandLineAction {\n  private _configFileParameter: CommandLineStringParameter;\n  private _localParameter: CommandLineFlagParameter;\n  private _verboseParameter: CommandLineFlagParameter;\n  private _diagnosticsParameter: CommandLineFlagParameter;\n  private _typescriptCompilerFolder: CommandLineStringParameter;\n\n  public constructor(parser: ApiExtractorCommandLine) {\n    super({\n      actionName: 'run',\n      summary: 'Invoke API Extractor on a project',\n      documentation: 'Invoke API Extractor on a project'\n    });\n  }\n\n  protected onDefineParameters(): void {\n    // override\n    this._configFileParameter = this.defineStringParameter({\n      parameterLongName: '--config',\n      parameterShortName: '-c',\n      argumentName: 'FILE',\n      description: `Use the specified ${ExtractorConfig.FILENAME} file path, rather than guessing its location`\n    });\n\n    this._localParameter = this.defineFlagParameter({\n      parameterLongName: '--local',\n      parameterShortName: '-l',\n      description:\n        'Indicates that API Extractor is running as part of a local build,' +\n        \" e.g. on a developer's machine. This disables certain validation that would\" +\n        ' normally be performed for a ship/production build. For example, the *.api.md' +\n        ' report file is automatically copied in a local build.'\n    });\n\n    this._verboseParameter = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      parameterShortName: '-v',\n      description: 'Show additional informational messages in the output.'\n    });\n\n    this._diagnosticsParameter = this.defineFlagParameter({\n      parameterLongName: '--diagnostics',\n      description:\n        'Show diagnostic messages used for troubleshooting problems with API Extractor.' +\n        '  This flag also enables the \"--verbose\" flag.'\n    });\n\n    this._typescriptCompilerFolder = this.defineStringParameter({\n      parameterLongName: '--typescript-compiler-folder',\n      argumentName: 'PATH',\n      description:\n        'API Extractor uses its own TypeScript compiler engine to analyze your project.  If your project' +\n        ' is built with a significantly different TypeScript version, sometimes API Extractor may report compilation' +\n        ' errors due to differences in the system typings (e.g. lib.dom.d.ts).  You can use the' +\n        ' \"--typescriptCompilerFolder\" option to specify the folder path where you installed the TypeScript package,' +\n        \" and API Extractor's compiler will use those system typings instead.\"\n    });\n  }\n\n  protected onExecute(): Promise<void> {\n    // override\n    const lookup: PackageJsonLookup = new PackageJsonLookup();\n    let configFilename: string;\n\n    let typescriptCompilerFolder: string | undefined = this._typescriptCompilerFolder.value;\n    if (typescriptCompilerFolder) {\n      typescriptCompilerFolder = path.normalize(typescriptCompilerFolder);\n\n      if (FileSystem.exists(typescriptCompilerFolder)) {\n        typescriptCompilerFolder = lookup.tryGetPackageFolderFor(typescriptCompilerFolder);\n        const typescriptCompilerPackageJson: IPackageJson | undefined = typescriptCompilerFolder\n          ? lookup.tryLoadPackageJsonFor(typescriptCompilerFolder)\n          : undefined;\n        if (!typescriptCompilerPackageJson) {\n          throw new Error(\n            `The path specified in the ${this._typescriptCompilerFolder.longName} parameter is not a package.`\n          );\n        } else if (typescriptCompilerPackageJson.name !== 'typescript') {\n          throw new Error(\n            `The path specified in the ${this._typescriptCompilerFolder.longName} parameter is not a TypeScript` +\n              ' compiler package.'\n          );\n        }\n      } else {\n        throw new Error(\n          `The path specified in the ${this._typescriptCompilerFolder.longName} parameter does not exist.`\n        );\n      }\n    }\n\n    if (this._configFileParameter.value) {\n      configFilename = path.normalize(this._configFileParameter.value);\n      if (!FileSystem.exists(configFilename)) {\n        throw new Error('Config file not found: ' + this._configFileParameter.value);\n      }\n    } else {\n      // Otherwise, figure out which project we're in and look for the config file\n      // at the project root\n      const packageFolder: string | undefined = lookup.tryGetPackageFolderFor('.');\n\n      // If there is no package, then try the current directory\n      const baseFolder: string = packageFolder ? packageFolder : process.cwd();\n\n      // First try the standard \"config\" subfolder:\n      configFilename = path.join(baseFolder, 'config', ExtractorConfig.FILENAME);\n      if (FileSystem.exists(configFilename)) {\n        if (FileSystem.exists(path.join(baseFolder, ExtractorConfig.FILENAME))) {\n          throw new Error(\n            `Found conflicting ${ExtractorConfig.FILENAME} files in \".\" and \"./config\" folders`\n          );\n        }\n      } else {\n        // Otherwise try the top-level folder\n        configFilename = path.join(baseFolder, ExtractorConfig.FILENAME);\n\n        if (!FileSystem.exists(configFilename)) {\n          throw new Error(`Unable to find an ${ExtractorConfig.FILENAME} file`);\n        }\n      }\n\n      console.log(`Using configuration from ${configFilename}` + os.EOL);\n    }\n\n    const configObjectFullPath: string = path.resolve(configFilename);\n    const configObject: IConfigFile = ExtractorConfig.loadFile(configObjectFullPath);\n\n    const extractorConfig: ExtractorConfig = ExtractorConfig.prepare({\n      configObject: configObject,\n      configObjectFullPath: configObjectFullPath,\n      packageJsonFullPath: lookup.tryGetPackageJsonFilePathFor(configObjectFullPath)\n    });\n\n    const extractorResult: ExtractorResult = Extractor.invoke(extractorConfig, {\n      localBuild: this._localParameter.value,\n      showVerboseMessages: this._verboseParameter.value,\n      showDiagnostics: this._diagnosticsParameter.value,\n      typescriptCompilerFolder: typescriptCompilerFolder\n    });\n\n    if (extractorResult.succeeded) {\n      console.log(os.EOL + 'API Extractor completed successfully');\n    } else {\n      process.exitCode = 1;\n\n      if (extractorResult.errorCount > 0) {\n        console.log(os.EOL + colors.red('API Extractor completed with errors'));\n      } else {\n        console.log(os.EOL + colors.yellow('API Extractor completed with warnings'));\n      }\n    }\n\n    return Promise.resolve();\n  }\n}\n"]}