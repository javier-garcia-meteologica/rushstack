{"version":3,"file":"DtsEmitHelpers.js","sourceRoot":"","sources":["../../src/generators/DtsEmitHelpers.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AAEjC,oEAA6D;AAE7D,qDAAiE;AAIjE;;GAEG;AACH,MAAa,cAAc;IAClB,MAAM,CAAC,UAAU,CACtB,YAA0B,EAC1B,eAAgC,EAChC,SAAoB;QAEpB,QAAQ,SAAS,CAAC,UAAU,EAAE;YAC5B,KAAK,yBAAa,CAAC,aAAa;gBAC9B,IAAI,eAAe,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE;oBACxD,YAAY,CAAC,KAAK,CAAC,uBAAuB,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;iBAC5E;qBAAM;oBACL,YAAY,CAAC,KAAK,CAAC,UAAU,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;iBACtD;gBACD,YAAY,CAAC,SAAS,CAAC,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBAC3D,MAAM;YACR,KAAK,yBAAa,CAAC,WAAW;gBAC5B,IAAI,eAAe,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE;oBACxD,YAAY,CAAC,KAAK,CAAC,YAAY,SAAS,CAAC,UAAU,OAAO,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;iBAC5F;qBAAM;oBACL,YAAY,CAAC,KAAK,CAAC,YAAY,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;iBAC1D;gBACD,YAAY,CAAC,SAAS,CAAC,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBAC3D,MAAM;YACR,KAAK,yBAAa,CAAC,UAAU;gBAC3B,YAAY,CAAC,SAAS,CAAC,eAAe,eAAe,CAAC,WAAW,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBACrG,MAAM;YACR,KAAK,yBAAa,CAAC,YAAY;gBAC7B,YAAY,CAAC,SAAS,CAAC,UAAU,eAAe,CAAC,WAAW,eAAe,SAAS,CAAC,UAAU,KAAK,CAAC,CAAC;gBACtG,MAAM;YACR;gBACE,MAAM,IAAI,iCAAa,CAAC,6BAA6B,CAAC,CAAC;SAC1D;IACH,CAAC;IAEM,MAAM,CAAC,eAAe,CAC3B,YAA0B,EAC1B,UAAkB,EAClB,eAAgC;QAEhC,IAAI,UAAU,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE;YAChD,YAAY,CAAC,SAAS,CAAC,kBAAkB,eAAe,CAAC,WAAW,GAAG,CAAC,CAAC;SAC1E;aAAM,IAAI,eAAe,CAAC,WAAW,KAAK,UAAU,EAAE;YACrD,YAAY,CAAC,SAAS,CAAC,YAAY,eAAe,CAAC,WAAW,OAAO,UAAU,IAAI,CAAC,CAAC;SACtF;aAAM;YACL,YAAY,CAAC,SAAS,CAAC,YAAY,UAAU,IAAI,CAAC,CAAC;SACpD;IACH,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,YAA0B,EAAE,SAAoB;QAC5E,IAAI,SAAS,CAAC,+BAA+B,CAAC,MAAM,GAAG,CAAC,EAAE;YACxD,YAAY,CAAC,SAAS,EAAE,CAAC;YACzB,KAAK,MAAM,8BAA8B,IAAI,SAAS,CAAC,+BAA+B,EAAE;gBACtF,YAAY,CAAC,SAAS,CAAC,kBAAkB,8BAA8B,IAAI,CAAC,CAAC;aAC9E;SACF;IACH,CAAC;CACF;AAxDD,wCAwDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as ts from 'typescript';\n\nimport { InternalError } from '@rushstack/node-core-library';\nimport { CollectorEntity } from '../collector/CollectorEntity';\nimport { AstImport, AstImportKind } from '../analyzer/AstImport';\nimport { StringWriter } from './StringWriter';\nimport { Collector } from '../collector/Collector';\n\n/**\n * Some common code shared between DtsRollupGenerator and ApiReportGenerator.\n */\nexport class DtsEmitHelpers {\n  public static emitImport(\n    stringWriter: StringWriter,\n    collectorEntity: CollectorEntity,\n    astImport: AstImport\n  ): void {\n    switch (astImport.importKind) {\n      case AstImportKind.DefaultImport:\n        if (collectorEntity.nameForEmit !== astImport.exportName) {\n          stringWriter.write(`import { default as ${collectorEntity.nameForEmit} }`);\n        } else {\n          stringWriter.write(`import ${astImport.exportName}`);\n        }\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\n        break;\n      case AstImportKind.NamedImport:\n        if (collectorEntity.nameForEmit !== astImport.exportName) {\n          stringWriter.write(`import { ${astImport.exportName} as ${collectorEntity.nameForEmit} }`);\n        } else {\n          stringWriter.write(`import { ${astImport.exportName} }`);\n        }\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\n        break;\n      case AstImportKind.StarImport:\n        stringWriter.writeLine(`import * as ${collectorEntity.nameForEmit} from '${astImport.modulePath}';`);\n        break;\n      case AstImportKind.EqualsImport:\n        stringWriter.writeLine(`import ${collectorEntity.nameForEmit} = require('${astImport.modulePath}');`);\n        break;\n      default:\n        throw new InternalError('Unimplemented AstImportKind');\n    }\n  }\n\n  public static emitNamedExport(\n    stringWriter: StringWriter,\n    exportName: string,\n    collectorEntity: CollectorEntity\n  ): void {\n    if (exportName === ts.InternalSymbolName.Default) {\n      stringWriter.writeLine(`export default ${collectorEntity.nameForEmit};`);\n    } else if (collectorEntity.nameForEmit !== exportName) {\n      stringWriter.writeLine(`export { ${collectorEntity.nameForEmit} as ${exportName} }`);\n    } else {\n      stringWriter.writeLine(`export { ${exportName} }`);\n    }\n  }\n\n  public static emitStarExports(stringWriter: StringWriter, collector: Collector): void {\n    if (collector.starExportedExternalModulePaths.length > 0) {\n      stringWriter.writeLine();\n      for (const starExportedExternalModulePath of collector.starExportedExternalModulePaths) {\n        stringWriter.writeLine(`export * from \"${starExportedExternalModulePath}\";`);\n      }\n    }\n  }\n}\n"]}