{"version":3,"file":"ApiReportGenerator.js","sourceRoot":"","sources":["../../src/generators/ApiReportGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as ts from 'typescript';\nimport { Text, InternalError } from '@rushstack/node-core-library';\nimport { ReleaseTag } from '@microsoft/api-extractor-model';\n\nimport { Collector } from '../collector/Collector';\nimport { TypeScriptHelpers } from '../analyzer/TypeScriptHelpers';\nimport { Span } from '../analyzer/Span';\nimport { CollectorEntity } from '../collector/CollectorEntity';\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\nimport { ApiItemMetadata } from '../collector/ApiItemMetadata';\nimport { AstImport } from '../analyzer/AstImport';\nimport { AstSymbol } from '../analyzer/AstSymbol';\nimport { ExtractorMessage } from '../api/ExtractorMessage';\nimport { StringWriter } from './StringWriter';\nimport { DtsEmitHelpers } from './DtsEmitHelpers';\n\nexport class ApiReportGenerator {\n  private static _trimSpacesRegExp: RegExp = / +$/gm;\n\n  /**\n   * Compares the contents of two API files that were created using ApiFileGenerator,\n   * and returns true if they are equivalent.  Note that these files are not normally edited\n   * by a human; the \"equivalence\" comparison here is intended to ignore spurious changes that\n   * might be introduced by a tool, e.g. Git newline normalization or an editor that strips\n   * whitespace when saving.\n   */\n  public static areEquivalentApiFileContents(\n    actualFileContent: string,\n    expectedFileContent: string\n  ): boolean {\n    // NOTE: \"\\s\" also matches \"\\r\" and \"\\n\"\n    const normalizedActual: string = actualFileContent.replace(/[\\s]+/g, ' ');\n    const normalizedExpected: string = expectedFileContent.replace(/[\\s]+/g, ' ');\n    return normalizedActual === normalizedExpected;\n  }\n\n  public static generateReviewFileContent(collector: Collector): string {\n    const stringWriter: StringWriter = new StringWriter();\n\n    stringWriter.writeLine(\n      [\n        `## API Report File for \"${collector.workingPackage.name}\"`,\n        ``,\n        `> Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).`,\n        ``\n      ].join('\\n')\n    );\n\n    // Write the opening delimiter for the Markdown code fence\n    stringWriter.writeLine('```ts\\n');\n\n    // Emit the imports\n    let importsEmitted: boolean = false;\n    for (const entity of collector.entities) {\n      if (entity.astEntity instanceof AstImport) {\n        DtsEmitHelpers.emitImport(stringWriter, entity, entity.astEntity);\n        importsEmitted = true;\n      }\n    }\n\n    if (importsEmitted) {\n      stringWriter.writeLine();\n    }\n\n    // Emit the regular declarations\n    for (const entity of collector.entities) {\n      if (entity.exported) {\n        // First, collect the list of export names for this symbol.  When reporting messages with\n        // ExtractorMessage.properties.exportName, this will enable us to emit the warning comments alongside\n        // the associated export statement.\n        interface IExportToEmit {\n          readonly exportName: string;\n          readonly associatedMessages: ExtractorMessage[];\n        }\n        const exportsToEmit: Map<string, IExportToEmit> = new Map<string, IExportToEmit>();\n\n        for (const exportName of entity.exportNames) {\n          if (!entity.shouldInlineExport) {\n            exportsToEmit.set(exportName, { exportName, associatedMessages: [] });\n          }\n        }\n\n        if (entity.astEntity instanceof AstSymbol) {\n          // Emit all the declarations for this entity\n          for (const astDeclaration of entity.astEntity.astDeclarations || []) {\n            // Get the messages associated with this declaration\n            const fetchedMessages: ExtractorMessage[] = collector.messageRouter.fetchAssociatedMessagesForReviewFile(\n              astDeclaration\n            );\n\n            // Peel off the messages associated with an export statement and store them\n            // in IExportToEmit.associatedMessages (to be processed later).  The remaining messages will\n            // added to messagesToReport, to be emitted next to the declaration instead of the export statement.\n            const messagesToReport: ExtractorMessage[] = [];\n            for (const message of fetchedMessages) {\n              if (message.properties.exportName) {\n                const exportToEmit: IExportToEmit | undefined = exportsToEmit.get(\n                  message.properties.exportName\n                );\n                if (exportToEmit) {\n                  exportToEmit.associatedMessages.push(message);\n                  continue;\n                }\n              }\n              messagesToReport.push(message);\n            }\n\n            stringWriter.write(\n              ApiReportGenerator._getAedocSynopsis(collector, astDeclaration, messagesToReport)\n            );\n\n            const span: Span = new Span(astDeclaration.declaration);\n\n            const apiItemMetadata: ApiItemMetadata = collector.fetchApiItemMetadata(astDeclaration);\n            if (apiItemMetadata.isPreapproved) {\n              ApiReportGenerator._modifySpanForPreapproved(span);\n            } else {\n              ApiReportGenerator._modifySpan(collector, span, entity, astDeclaration, false);\n            }\n\n            span.writeModifiedText(stringWriter.stringBuilder);\n            stringWriter.writeLine('\\n');\n          }\n        }\n\n        // Now emit the export statements for this entity.\n        for (const exportToEmit of exportsToEmit.values()) {\n          // Write any associated messages\n          for (const message of exportToEmit.associatedMessages) {\n            ApiReportGenerator._writeLineAsComments(\n              stringWriter,\n              'Warning: ' + message.formatMessageWithoutLocation()\n            );\n          }\n\n          DtsEmitHelpers.emitNamedExport(stringWriter, exportToEmit.exportName, entity);\n          stringWriter.writeLine();\n        }\n      }\n    }\n\n    DtsEmitHelpers.emitStarExports(stringWriter, collector);\n\n    // Write the unassociated warnings at the bottom of the file\n    const unassociatedMessages: ExtractorMessage[] = collector.messageRouter.fetchUnassociatedMessagesForReviewFile();\n    if (unassociatedMessages.length > 0) {\n      stringWriter.writeLine();\n      ApiReportGenerator._writeLineAsComments(stringWriter, 'Warnings were encountered during analysis:');\n      ApiReportGenerator._writeLineAsComments(stringWriter, '');\n      for (const unassociatedMessage of unassociatedMessages) {\n        ApiReportGenerator._writeLineAsComments(\n          stringWriter,\n          unassociatedMessage.formatMessageWithLocation(collector.workingPackage.packageFolder)\n        );\n      }\n    }\n\n    if (collector.workingPackage.tsdocComment === undefined) {\n      stringWriter.writeLine();\n      ApiReportGenerator._writeLineAsComments(\n        stringWriter,\n        '(No @packageDocumentation comment for this package)'\n      );\n    }\n\n    // Write the closing delimiter for the Markdown code fence\n    stringWriter.writeLine('\\n```');\n\n    // Remove any trailing spaces\n    return stringWriter.toString().replace(ApiReportGenerator._trimSpacesRegExp, '');\n  }\n\n  /**\n   * Before writing out a declaration, _modifySpan() applies various fixups to make it nice.\n   */\n  private static _modifySpan(\n    collector: Collector,\n    span: Span,\n    entity: CollectorEntity,\n    astDeclaration: AstDeclaration,\n    insideTypeLiteral: boolean\n  ): void {\n    // Should we process this declaration at all?\n    // eslint-disable-next-line no-bitwise\n    if ((astDeclaration.modifierFlags & ts.ModifierFlags.Private) !== 0) {\n      span.modification.skipAll();\n      return;\n    }\n\n    const previousSpan: Span | undefined = span.previousSibling;\n\n    let recurseChildren: boolean = true;\n    let sortChildren: boolean = false;\n\n    switch (span.kind) {\n      case ts.SyntaxKind.JSDocComment:\n        span.modification.skipAll();\n        // For now, we don't transform JSDoc comment nodes at all\n        recurseChildren = false;\n        break;\n\n      case ts.SyntaxKind.ExportKeyword:\n      case ts.SyntaxKind.DefaultKeyword:\n      case ts.SyntaxKind.DeclareKeyword:\n        // Delete any explicit \"export\" or \"declare\" keywords -- we will re-add them below\n        span.modification.skipAll();\n        break;\n\n      case ts.SyntaxKind.InterfaceKeyword:\n      case ts.SyntaxKind.ClassKeyword:\n      case ts.SyntaxKind.EnumKeyword:\n      case ts.SyntaxKind.NamespaceKeyword:\n      case ts.SyntaxKind.ModuleKeyword:\n      case ts.SyntaxKind.TypeKeyword:\n      case ts.SyntaxKind.FunctionKeyword:\n        // Replace the stuff we possibly deleted above\n        let replacedModifiers: string = '';\n\n        if (entity.shouldInlineExport) {\n          replacedModifiers = 'export ' + replacedModifiers;\n        }\n\n        if (previousSpan && previousSpan.kind === ts.SyntaxKind.SyntaxList) {\n          // If there is a previous span of type SyntaxList, then apply it before any other modifiers\n          // (e.g. \"abstract\") that appear there.\n          previousSpan.modification.prefix = replacedModifiers + previousSpan.modification.prefix;\n        } else {\n          // Otherwise just stick it in front of this span\n          span.modification.prefix = replacedModifiers + span.modification.prefix;\n        }\n        break;\n\n      case ts.SyntaxKind.SyntaxList:\n        if (span.parent) {\n          if (AstDeclaration.isSupportedSyntaxKind(span.parent.kind)) {\n            // If the immediate parent is an API declaration, and the immediate children are API declarations,\n            // then sort the children alphabetically\n            sortChildren = true;\n          } else if (span.parent.kind === ts.SyntaxKind.ModuleBlock) {\n            // Namespaces are special because their chain goes ModuleDeclaration -> ModuleBlock -> SyntaxList\n            sortChildren = true;\n          }\n        }\n        break;\n\n      case ts.SyntaxKind.VariableDeclaration:\n        if (!span.parent) {\n          // The VariableDeclaration node is part of a VariableDeclarationList, however\n          // the Entry.followedSymbol points to the VariableDeclaration part because\n          // multiple definitions might share the same VariableDeclarationList.\n          //\n          // Since we are emitting a separate declaration for each one, we need to look upwards\n          // in the ts.Node tree and write a copy of the enclosing VariableDeclarationList\n          // content (e.g. \"var\" from \"var x=1, y=2\").\n          const list: ts.VariableDeclarationList | undefined = TypeScriptHelpers.matchAncestor(span.node, [\n            ts.SyntaxKind.VariableDeclarationList,\n            ts.SyntaxKind.VariableDeclaration\n          ]);\n          if (!list) {\n            // This should not happen unless the compiler API changes somehow\n            throw new InternalError('Unsupported variable declaration');\n          }\n          const listPrefix: string = list\n            .getSourceFile()\n            .text.substring(list.getStart(), list.declarations[0].getStart());\n          span.modification.prefix = listPrefix + span.modification.prefix;\n          span.modification.suffix = ';';\n\n          if (entity.shouldInlineExport) {\n            span.modification.prefix = 'export ' + span.modification.prefix;\n          }\n        }\n        break;\n\n      case ts.SyntaxKind.Identifier:\n        const referencedEntity: CollectorEntity | undefined = collector.tryGetEntityForNode(\n          span.node as ts.Identifier\n        );\n\n        if (referencedEntity) {\n          if (!referencedEntity.nameForEmit) {\n            // This should never happen\n            throw new InternalError('referencedEntry.nameForEmit is undefined');\n          }\n\n          span.modification.prefix = referencedEntity.nameForEmit;\n          // For debugging:\n          // span.modification.prefix += '/*R=FIX*/';\n        } else {\n          // For debugging:\n          // span.modification.prefix += '/*R=KEEP*/';\n        }\n\n        break;\n\n      case ts.SyntaxKind.TypeLiteral:\n        insideTypeLiteral = true;\n        break;\n\n      case ts.SyntaxKind.ImportType:\n        {\n          const node: ts.ImportTypeNode = span.node as ts.ImportTypeNode;\n          const referencedEntity: CollectorEntity | undefined = collector.tryGetEntityForNode(node);\n\n          if (referencedEntity) {\n            if (!referencedEntity.nameForEmit) {\n              // This should never happen\n              throw new InternalError('referencedEntry.nameForEmit is undefined');\n            }\n\n            if (referencedEntity.astEntity instanceof AstSymbol) {\n              // Replace with internal symbol\n\n              span.modification.skipAll();\n              span.modification.prefix = referencedEntity.nameForEmit;\n            } else {\n              // External ImportType nodes are associated with a StarImport\n              // Replace node with nameForEmit and recover imported names from node qualifier\n\n              const qualifier: string = node.qualifier ? node.qualifier.getText() : '';\n              const replacement: string = qualifier\n                ? `${referencedEntity.nameForEmit}.${qualifier}`\n                : referencedEntity.nameForEmit;\n\n              span.modification.skipAll();\n              span.modification.prefix = replacement;\n            }\n          }\n        }\n        break;\n    }\n\n    if (recurseChildren) {\n      for (const child of span.children) {\n        let childAstDeclaration: AstDeclaration = astDeclaration;\n\n        if (AstDeclaration.isSupportedSyntaxKind(child.kind)) {\n          childAstDeclaration = collector.astSymbolTable.getChildAstDeclarationByNode(\n            child.node,\n            astDeclaration\n          );\n\n          if (sortChildren) {\n            span.modification.sortChildren = true;\n            child.modification.sortKey = Collector.getSortKeyIgnoringUnderscore(\n              childAstDeclaration.astSymbol.localName\n            );\n          }\n\n          if (!insideTypeLiteral) {\n            const messagesToReport: ExtractorMessage[] = collector.messageRouter.fetchAssociatedMessagesForReviewFile(\n              childAstDeclaration\n            );\n            const aedocSynopsis: string = ApiReportGenerator._getAedocSynopsis(\n              collector,\n              childAstDeclaration,\n              messagesToReport\n            );\n            const indentedAedocSynopsis: string = ApiReportGenerator._addIndentAfterNewlines(\n              aedocSynopsis,\n              child.getIndent()\n            );\n\n            child.modification.prefix = indentedAedocSynopsis + child.modification.prefix;\n          }\n        }\n\n        ApiReportGenerator._modifySpan(collector, child, entity, childAstDeclaration, insideTypeLiteral);\n      }\n    }\n  }\n\n  /**\n   * For declarations marked as `@preapproved`, this is used instead of _modifySpan().\n   */\n  private static _modifySpanForPreapproved(span: Span): void {\n    // Match something like this:\n    //\n    //   ClassDeclaration:\n    //     SyntaxList:\n    //       ExportKeyword:  pre=[export] sep=[ ]\n    //       DeclareKeyword:  pre=[declare] sep=[ ]\n    //     ClassKeyword:  pre=[class] sep=[ ]\n    //     Identifier:  pre=[_PreapprovedClass] sep=[ ]\n    //     FirstPunctuation:  pre=[{] sep=[\\n\\n    ]\n    //     SyntaxList:\n    //       ...\n    //     CloseBraceToken:  pre=[}]\n    //\n    // or this:\n    //   ModuleDeclaration:\n    //     SyntaxList:\n    //       ExportKeyword:  pre=[export] sep=[ ]\n    //       DeclareKeyword:  pre=[declare] sep=[ ]\n    //     NamespaceKeyword:  pre=[namespace] sep=[ ]\n    //     Identifier:  pre=[_PreapprovedNamespace] sep=[ ]\n    //     ModuleBlock:\n    //       FirstPunctuation:  pre=[{] sep=[\\n\\n    ]\n    //       SyntaxList:\n    //         ...\n    //       CloseBraceToken:  pre=[}]\n    //\n    // And reduce it to something like this:\n    //\n    //   // @internal (undocumented)\n    //   class _PreapprovedClass { /* (preapproved) */ }\n    //\n\n    let skipRest: boolean = false;\n    for (const child of span.children) {\n      if (skipRest || child.kind === ts.SyntaxKind.SyntaxList || child.kind === ts.SyntaxKind.JSDocComment) {\n        child.modification.skipAll();\n      }\n      if (child.kind === ts.SyntaxKind.Identifier) {\n        skipRest = true;\n        child.modification.omitSeparatorAfter = true;\n        child.modification.suffix = ' { /* (preapproved) */ }';\n      }\n    }\n  }\n\n  /**\n   * Writes a synopsis of the AEDoc comments, which indicates the release tag,\n   * whether the item has been documented, and any warnings that were detected\n   * by the analysis.\n   */\n  private static _getAedocSynopsis(\n    collector: Collector,\n    astDeclaration: AstDeclaration,\n    messagesToReport: ExtractorMessage[]\n  ): string {\n    const stringWriter: StringWriter = new StringWriter();\n\n    for (const message of messagesToReport) {\n      ApiReportGenerator._writeLineAsComments(\n        stringWriter,\n        'Warning: ' + message.formatMessageWithoutLocation()\n      );\n    }\n\n    if (!collector.isAncillaryDeclaration(astDeclaration)) {\n      const footerParts: string[] = [];\n      const apiItemMetadata: ApiItemMetadata = collector.fetchApiItemMetadata(astDeclaration);\n      if (!apiItemMetadata.releaseTagSameAsParent) {\n        if (apiItemMetadata.effectiveReleaseTag !== ReleaseTag.None) {\n          footerParts.push(ReleaseTag.getTagName(apiItemMetadata.effectiveReleaseTag));\n        }\n      }\n\n      if (apiItemMetadata.isSealed) {\n        footerParts.push('@sealed');\n      }\n\n      if (apiItemMetadata.isVirtual) {\n        footerParts.push('@virtual');\n      }\n\n      if (apiItemMetadata.isOverride) {\n        footerParts.push('@override');\n      }\n\n      if (apiItemMetadata.isEventProperty) {\n        footerParts.push('@eventProperty');\n      }\n\n      if (apiItemMetadata.tsdocComment) {\n        if (apiItemMetadata.tsdocComment.deprecatedBlock) {\n          footerParts.push('@deprecated');\n        }\n      }\n\n      if (apiItemMetadata.needsDocumentation) {\n        footerParts.push('(undocumented)');\n      }\n\n      if (footerParts.length > 0) {\n        if (messagesToReport.length > 0) {\n          ApiReportGenerator._writeLineAsComments(stringWriter, ''); // skip a line after the warnings\n        }\n\n        ApiReportGenerator._writeLineAsComments(stringWriter, footerParts.join(' '));\n      }\n    }\n\n    return stringWriter.toString();\n  }\n\n  private static _writeLineAsComments(stringWriter: StringWriter, line: string): void {\n    const lines: string[] = Text.convertToLf(line).split('\\n');\n    for (const realLine of lines) {\n      stringWriter.write('// ');\n      stringWriter.write(realLine);\n      stringWriter.writeLine();\n    }\n  }\n\n  private static _addIndentAfterNewlines(text: string, indent: string): string {\n    if (text.length === 0 || indent.length === 0) {\n      return text;\n    }\n    return Text.replaceAll(text, '\\n', '\\n' + indent);\n  }\n}\n"]}